
#include <CNS.H>
#include <CNS_F.H>

#include <AMReX_EBFArrayBox.H>
#include <AMReX_MultiCutFab.H>

using namespace amrex;
    amrex::Vector<amrex::MultiFab> volfracmfab, voltemp;
   // MultiFab volfracmfab,voltemp;
//const amrex::MultiFab& S_test ();

void GlobalTest ()
{
//const amrex::MultiFab& S_test ();
}

void 
CNS::Test()
{
    //MultiFab& S_test();

    MultiFab S_test(grids,dmap,NUM_STATE,0,MFInfo(),Factory());
    S_test.Finalize();
}

Real
CNS::advance (Real time, Real dt, int iteration, int ncycle)
{
    BL_PROFILE("CNS::advance()");
    
    //The routine to redistribute the moving covered EB flux

    MultiFab& S_new=get_new_data(State_Type);    
    MultiFab& S_old=get_old_data(State_Type);    

    MultiFab Sborder(grids,dmap,NUM_STATE,NUM_GROW,MFInfo(),Factory());

 if(time >dt && iteration%(level+1)==0)
    {
    std::cout << "Inside here" << "\n";
    voltemp.resize(2);
    voltemp[level].define(grids,dmap,1,4,MFInfo(),Factory());
    //voltemp[level].ParallelCopy(volfracmfab[level], 0, 0, 1, 4, 4);//, period, op);
   FillPatch(*this, Sborder, 4, time+dt, 0, 7, 1,0);
    //voltemp[level].ParallelCopy(S_new, 7, 0, 1, 5, 5);//, period, op);
    MultiFab::Copy(voltemp[level],Sborder, 0, 0, 1, 4);//, 5);//, period, op);

    RedistributeCovered(&level,voltemp[level]);
    //voltemp[level].clear();
    //volfracmfab[level].clear();
    }
 
    if(iteration%(level+1)==0)// && iteration<=level+1)
    {
    //volfracmfab.resize(2);
    //volfracmfab[level].define(volfrac->boxArray(),volfrac->DistributionMap(),1,4,MFInfo(),Factory());
    //volfracmfab[level].define(grids,dmap,1,5,MFInfo(),Factory());
    //MultiFab::Copy(volfracmfab[level],*volfrac,0,0,1,4);
    MultiFab::Copy(S_new,*volfrac,0,7,1,4);
    }

	
    return dt;
}

void
CNS::compute_dSdt (const MultiFab& S, MultiFab& dSdt, Real dt,
                   EBFluxRegister* fr_as_crse, EBFluxRegister* fr_as_fine, Real time)
{
    BL_PROFILE("CNS::compute_dSdt()");

    float timeval = (float) time;

    const Real* dx = geom.CellSize();
    const int ncomp = dSdt.nComp();

    int as_crse = (fr_as_crse != nullptr);
    int as_fine = (fr_as_fine != nullptr);

    MultiFab& cost = get_new_data(Cost_Type);

    auto const& fact = dynamic_cast<EBFArrayBoxFactory const&>(S.Factory());
    auto const& flags = fact.getMultiEBCellFlagFab();

#ifdef _OPENMP
#pragma omp parallel
#endif
    {
        std::array<FArrayBox,AMREX_SPACEDIM> flux;
        FArrayBox dm_as_fine(Box::TheUnitBox(),ncomp);
        FArrayBox fab_drho_as_crse(Box::TheUnitBox(),ncomp);
        IArrayBox fab_rrflag_as_crse(Box::TheUnitBox());

        for (MFIter mfi(S, MFItInfo().EnableTiling(hydro_tile_size).SetDynamic(true));
                        mfi.isValid(); ++mfi)
        {
            Real wt = amrex::second();

            const Box& bx = mfi.tilebox();

            const auto& sfab = S[mfi];
            const auto& flag = flags[mfi];

            //if (1){
            if (flag.getType(bx) == FabType::covered) {
                dSdt[mfi].setVal(0.0, bx, 0, ncomp);
            } else {

                // flux is used to store centroid flux needed for reflux
                for (int idim=0; idim < AMREX_SPACEDIM; ++idim) {
                    flux[idim].resize(amrex::surroundingNodes(bx,idim),ncomp);
                }

                if (flag.getType(amrex::grow(bx,1)) == FabType::regular)
                {
                    cns_compute_dudt(BL_TO_FORTRAN_BOX(bx),
                                     BL_TO_FORTRAN_ANYD(dSdt[mfi]),
                                     BL_TO_FORTRAN_ANYD(S[mfi]),
                                     BL_TO_FORTRAN_ANYD(flux[0]),
                                     BL_TO_FORTRAN_ANYD(flux[1]),
                                     BL_TO_FORTRAN_ANYD(flux[2]),
                                     dx, &dt,&level);

                    if (fr_as_crse) {
                        fr_as_crse->CrseAdd(mfi,{&flux[0],&flux[1],&flux[2]},dx,dt,RunOn::Cpu);
                    }

                    if (fr_as_fine) {
                        fr_as_fine->FineAdd(mfi,{&flux[0],&flux[1],&flux[2]},dx,dt,RunOn::Cpu);
                    }
                }
                else
                {
                    FArrayBox* p_drho_as_crse = (fr_as_crse) ?
                        fr_as_crse->getCrseData(mfi) : &fab_drho_as_crse;
                    const IArrayBox* p_rrflag_as_crse = (fr_as_crse) ?
                        fr_as_crse->getCrseFlag(mfi) : &fab_rrflag_as_crse;

                    if (fr_as_fine) {
                        dm_as_fine.resize(amrex::grow(bx,1),ncomp);
                    }

                    cns_eb_compute_dudt(BL_TO_FORTRAN_BOX(bx),
                                        BL_TO_FORTRAN_ANYD(dSdt[mfi]),
                                        BL_TO_FORTRAN_ANYD(S[mfi]),
                                        BL_TO_FORTRAN_ANYD(flux[0]),
                                        BL_TO_FORTRAN_ANYD(flux[1]),
                                        BL_TO_FORTRAN_ANYD(flux[2]),
                                        BL_TO_FORTRAN_ANYD(flag),
                                        BL_TO_FORTRAN_ANYD((*volfrac)[mfi]),
                                        BL_TO_FORTRAN_ANYD((*bndrycent)[mfi]),
                                        BL_TO_FORTRAN_ANYD((*areafrac[0])[mfi]),
                                        BL_TO_FORTRAN_ANYD((*areafrac[1])[mfi]),
                                        BL_TO_FORTRAN_ANYD((*areafrac[2])[mfi]),
                                        BL_TO_FORTRAN_ANYD((*facecent[0])[mfi]),
                                        BL_TO_FORTRAN_ANYD((*facecent[1])[mfi]),
                                        BL_TO_FORTRAN_ANYD((*facecent[2])[mfi]),
                                        &as_crse,
                                        BL_TO_FORTRAN_ANYD(*p_drho_as_crse),
                                        BL_TO_FORTRAN_ANYD(*p_rrflag_as_crse),
                                        &as_fine,
                                        BL_TO_FORTRAN_ANYD(dm_as_fine),
                                        BL_TO_FORTRAN_ANYD(level_mask[mfi]),
                                        dx, &dt,&level,&time);

                    if (fr_as_crse) {
                        fr_as_crse->CrseAdd(mfi, {&flux[0],&flux[1],&flux[2]}, dx,dt,
                                            (*volfrac)[mfi],
                                            {&((*areafrac[0])[mfi]),
                                             &((*areafrac[1])[mfi]),
                                             &((*areafrac[2])[mfi])},
                                            RunOn::Cpu);
                    }

                    if (fr_as_fine) {
                        fr_as_fine->FineAdd(mfi, {&flux[0],&flux[1],&flux[2]}, dx,dt,
                                            (*volfrac)[mfi],
                                            {&((*areafrac[0])[mfi]),
                                             &((*areafrac[1])[mfi]),
                                             &((*areafrac[2])[mfi])},
                                            dm_as_fine,
                                            RunOn::Cpu);
                    }
                }
            }

            wt = (amrex::second() - wt) / bx.d_numPts();
            cost[mfi].plus(wt, bx);
        }
    }
}

void
CNS::CopyVolfracToS_old (const int* lev, const MultiFab& S)
{

#ifdef _OPENMP
#pragma omp parallel
#endif
 //for (MFIter mfi(S, MFItInfo().EnableTiling(hydro_tile_size).SetDynamic(true));
   //                     mfi.isValid(); ++mfi)
        for (MFIter mfi(S);mfi.isValid(); ++mfi)
        {

            const Box& bx = mfi.tilebox();

            copyvolfrac(lev, BL_TO_FORTRAN_BOX(bx),
                                BL_TO_FORTRAN_ANYD(S[mfi]),
                                BL_TO_FORTRAN_ANYD((*volfrac)[mfi]));

          }
}


void
CNS::RedistributeCovered (const int* lev, const MultiFab& S)
{

#ifdef _OPENMP
#pragma omp parallel
#endif

	//std::cout << S.boxArray() << "\n";

		// for (MFIter mfi(S, MFItInfo().EnableTiling(hydro_tile_size).SetDynamic(true));
                //        mfi.isValid(); ++mfi)	
        for (MFIter mfi(S);mfi.isValid(); ++mfi)
        {
            const Box& bx = mfi.tilebox();

            redistributecovered(lev, BL_TO_FORTRAN_BOX(bx),
                                BL_TO_FORTRAN_ANYD(S[mfi]),
                                BL_TO_FORTRAN_ANYD((*volfrac)[mfi]));
            //redistributecovered(lev, BL_TO_FORTRAN_BOX(bx),
            //                    BL_TO_FORTRAN_ANYD((*volfrac)[mfi]));

          }
}
